from kivy.uix.screenmanager import Screen
from kivy.uix.widget import Widget
from kivy.uix.label import Label
from kivy.uix.button import Button
from kivy.graphics import Rectangle, Ellipse, Color, Line
from kivy.clock import Clock
from kivy.core.window import Window
from utils.config import get_difficulty
from random import randint, choice, uniform  
from kivy.core.audio import SoundLoader
from kivy.uix.popup import Popup
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.image import Image

class PowerUp:
    def __init__(self, x, y, effect):
        self.effect = effect  # ‡∏û‡∏•‡∏±‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏© (‡∏Ç‡∏¢‡∏≤‡∏¢‡πÅ‡∏û‡∏î‡πÄ‡∏î‡∏¥‡∏•, ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏π‡∏Å‡∏ö‡∏≠‡∏•, ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß)
        self.image = Image(source="assets/image/powerups.jpg", size=(30, 30), pos=(x, y))
        self.falling_speed = 1  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏ï‡∏Å

    def move_down(self):
        self.image.pos = (self.image.pos[0], self.image.pos[1] - self.falling_speed)

class GameScreen(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.game_widget = BreakoutGame(self)
        self.add_widget(self.game_widget)

        # UI elements with dynamic positioning
        self.score_label = Label(
            text="Score: 0",
            size_hint=(None, None), size=(150, 30),
            pos_hint={"left": 1, "top": 1}
        )
        self.lives_label = Label(
            text="Lives: 3",
            size_hint=(None, None), size=(150, 30),
            pos_hint={"center_x": 0.5, "top": 1}
        )
        self.back_button = Button(
            text="Back to Menu",
            size_hint=(None, None), size=(150, 50),
            pos_hint={"right": 1, "top": 1}
        )

        self.back_button.bind(on_press=self.back_to_menu)

        self.add_widget(self.score_label)
        self.add_widget(self.lives_label)
        self.add_widget(self.back_button)

        Window.bind(on_resize=self.update_ui_positions)

    def on_pre_enter(self, *args):
        self.game_widget.start_game()
        self.update_labels()

    def update_labels(self):
        self.score_label.text = f"Score: {self.game_widget.score}"
        self.lives_label.text = f"Lives: {self.game_widget.lives}"

    def update_ui_positions(self, instance, width, height):
        padding = 10  # ‡∏£‡∏∞‡∏¢‡∏∞‡∏Ç‡∏≠‡∏ö
        self.score_label.pos = (padding, height - 40)
        self.lives_label.pos = (width / 2 - 75, height - 40)
        self.back_button.pos = (width - 160, height - 50)

    def back_to_menu(self, instance):
        self.manager.current = "menu"

class BreakoutGame(Widget):
    def __init__(self, game_screen, **kwargs):
        super().__init__(**kwargs)
        self.game_screen = game_screen
        self.ball = None
        self.paddle = None
        self.blocks = []
        self.dx = 0.5
        self.dy = 0.5
        self.lives = 3
        self.score = 0
        self.running = False
        self.paused = False  # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ paused ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
        self.moving_left = False
        self.moving_right = False
        self.level = 1  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà Level 1
        self.paddle_speed = 12  # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ speed ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        self.powerups = []  # ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏Å‡∏•‡∏á‡∏°‡∏≤
        self.extra_balls = []  # üèÄ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏•‡∏π‡∏Å‡∏ö‡∏≠‡∏•‡πÄ‡∏™‡∏£‡∏¥‡∏°
        self.setup_game()

        # ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á
        self.hit_sound = SoundLoader.load('assets/sounds/hit.wav')  # ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ä‡∏ô‡∏ö‡∏•‡πá‡∏≠‡∏Å
        self.break_sound = SoundLoader.load('assets/sounds/break.wav')  # ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏ñ‡∏π‡∏Å‡∏ó‡∏≥‡∏•‡∏≤‡∏¢

        Window.bind(on_resize=self.update_game_elements)
        Window.bind(on_key_down=self.on_key_down)
        Window.bind(on_key_up=self.on_key_up)

    def setup_game(self):
        self.canvas.clear()
        difficulty = get_difficulty()
    
        # ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å‡∏Ç‡∏≠‡∏á‡πÇ‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        settings = {
            "easy": {"speed": 2, "paddle_size": 150, "lives": 4},
            "medium": {"speed": 3, "paddle_size": 120, "lives": 3},
            "hard": {"speed": 4, "paddle_size": 100, "lives": 2},
        }[difficulty]

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏ï‡∏≤‡∏° Level
        self.dx = settings["speed"]
        self.dy = settings["speed"]
        self.lives = settings["lives"]

        with self.canvas:
            Color(0, 0, 0)
            Rectangle(size=Window.size)

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏¢‡∏Å UI
            Color(1, 1, 1)
            Line(points=[0, Window.height - 60, Window.width, Window.height - 60], width=2)

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á Paddle
            Color(1, 1, 1)
            self.paddle = Rectangle(size=(settings["paddle_size"], 20), pos=(Window.width / 2 - settings["paddle_size"] / 2, 50))

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á Ball
            Color(1, 1, 1)
            self.ball = Ellipse(size=(20, 20), pos=(Window.width / 2, Window.height / 2))

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏•‡πá‡∏≠‡∏Å‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ setup_level()
            self.blocks = []
            self.setup_level()

            self.running = True

    def setup_level(self):
        self.blocks = []
        block_color = (1, 0, 0, 1)  # ‡∏™‡∏µ‡πÅ‡∏î‡∏á (RGBA)
        
        if self.level == 1:  # Level 1: 2 columns x 2 rows
            cols = 7
            rows = 2
        elif self.level == 2:  # Level 2: 3 columns x 3 rows
            cols = 7
            rows = 3
        elif self.level == 3:  # Level 3: 4 columns x 4 rows
            cols = 7
            rows = 4

        block_width = Window.width / cols
        block_height = 30
        block_start_y = Window.height - 90

        for row in range(rows):
            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î hit_points ‡πÇ‡∏î‡∏¢‡πÅ‡∏ñ‡∏ß‡∏ö‡∏ô‡∏™‡∏∏‡∏î (row 0) ‡∏°‡∏µ 3 HP ‡πÅ‡∏•‡∏∞‡∏•‡∏î‡∏•‡∏á‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö
            hit_points = max(1, 3 - row)  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà 3 ‡πÅ‡∏•‡∏∞‡∏•‡∏î‡∏•‡∏á 1 ‡∏ï‡πà‡∏≠‡πÅ‡∏ñ‡∏ß ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ 1
            for col in range(cols):
                with self.canvas:
                    color = Color(*block_color)  # ‡∏™‡∏£‡πâ‡∏≤‡∏á Color object
                    block = Rectangle(
                        size=(block_width - 5, block_height - 5),
                        pos=(col * block_width, block_start_y - (row * block_height))
                    )
                    block_data = {
                        "rectangle": block,
                        "hit_points": hit_points,  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏û‡∏•‡∏±‡∏á‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏ï‡∏≤‡∏°‡πÅ‡∏ñ‡∏ß
                        "color": color             # ‡πÄ‡∏Å‡πá‡∏ö Color object
                    }
                    self.blocks.append(block_data)
                    self.update_block_color(block_data)  # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏µ‡∏ï‡∏≤‡∏° hit_points

    def update_block_color(self, block):
        hit_points = block["hit_points"]
        color = block["color"]  # ‡πÉ‡∏ä‡πâ Color object ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏µ‡∏ï‡∏≤‡∏° hit_points
        if hit_points == 3:
            color.rgba = (1, 0, 0, 1)  # ‡∏™‡∏µ‡πÅ‡∏î‡∏á
        elif hit_points == 2:
            color.rgba = (0, 0, 1, 1)  # ‡∏™‡∏µ‡∏ü‡πâ‡∏≤
        else:  # hit_points == 1
            color.rgba = (1, 1, 0, 1)  # ‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á

    def update_game_elements(self, instance, width, height):
        # Update paddle position to be centered
        paddle_size = self.paddle.size[0]  # Keep original paddle size
        self.paddle.pos = (width / 2 - paddle_size / 2, self.paddle.pos[1])
        
        if self.level == 1:
            cols = 7
            rows = 2
        elif self.level == 2:
            cols = 7
            rows = 3
        elif self.level == 3:
            cols = 7
            rows = 4
       
        block_width = width / cols
        block_height = 30
        block_start_y = height - 90

        index = 0
        for row in range(rows):
            for col in range(cols):
                if index < len(self.blocks):
                    self.blocks[index]["rectangle"].pos = (col * block_width, block_start_y - (row * block_height))
                    index += 1

    def start_game(self):
        self.setup_game()
        Clock.schedule_interval(self.update, 1 / 60)
    
    def toggle_pause(self):
        self.paused = not self.paused  # ‡∏™‡∏•‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Pause
        if self.paused:
            print("Game Paused")
            self.show_pause_popup()
        else:
            print("Game Resumed")
            if hasattr(self, "pause_popup"):
                self.pause_popup.dismiss()

    def show_pause_popup(self):
        layout = BoxLayout(orientation="vertical", spacing=10, padding=10)

        resume_button = Button(text="Resume", size_hint=(1, 0.5))
        exit_button = Button(text="Exit to Menu", size_hint=(1, 0.5))

        resume_button.bind(on_press=self.resume_game)
        exit_button.bind(on_press=self.exit_to_menu)

        layout.add_widget(resume_button)
        layout.add_widget(exit_button)

        self.pause_popup = Popup(
            title="Game Paused",
            content=layout,
            size_hint=(None, None),
            size=(300, 200),
            auto_dismiss=False
        )

        self.pause_popup.open()
        
    def resume_game(self, instance):
        self.toggle_pause()  # ‡∏õ‡∏¥‡∏î Pause ‡πÅ‡∏•‡∏∞‡∏õ‡∏¥‡∏î Popup

    def exit_to_menu(self, instance):
        self.pause_popup.dismiss()
        self.running = False
        Clock.unschedule(self.update)
        self.game_screen.manager.current = "menu"

    def update(self, dt):
        if not self.running or self.paused:  # ‡∏´‡∏¢‡∏∏‡∏î‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏≤‡∏Å paused
            return

        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏•‡∏π‡∏Å‡∏ö‡∏≠‡∏•‡∏´‡∏•‡∏±‡∏Å 
        self.ball.pos = (self.ball.pos[0] + self.dx, self.ball.pos[1] + self.dy)

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡πâ‡∏á‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏ö‡∏≠‡∏•‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏±‡∏ö‡∏Ç‡∏≠‡∏ö‡∏à‡∏≠ 
        if self.ball.pos[0] <= 0 or self.ball.pos[0] + self.ball.size[0] >= Window.width:
            self.dx *= -1
        if self.ball.pos[1] + self.ball.size[1] >= Window.height:
            self.dy *= -1
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡πâ‡∏á‡∏Å‡∏±‡∏ö Paddle ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏î‡πâ‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô 
        if (self.ball.pos[1] <= self.paddle.pos[1] + self.paddle.size[1] and 
            self.paddle.pos[0] <= self.ball.pos[0] <= self.paddle.pos[0] + self.paddle.size[0]):
            self.dy = abs(self.dy)  # ‡πÄ‡∏î‡πâ‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô 

        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á Power-up ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö 
        for powerup in self.powerups[:]:
            powerup.move_down()
            # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏£‡∏±‡∏ö‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
            if (self.paddle.pos[0] < powerup.image.pos[0] < self.paddle.pos[0] + self.paddle.size[0] and 
                self.paddle.pos[1] < powerup.image.pos[1] < self.paddle.pos[1] + self.paddle.size[1]):
                self.apply_powerup(powerup.effect)  # ‡πÉ‡∏ä‡πâ‡∏û‡∏•‡∏±‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©
                self.remove_widget(powerup.image)
                self.powerups.remove(powerup)

        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ö‡∏≠‡∏•‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        for extra in self.extra_balls[:]:  # ‡πÉ‡∏ä‡πâ [:] ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏Ç‡∏ì‡∏∞‡∏ß‡∏ô‡∏•‡∏π‡∏õ 
            extra["ball"].pos = (extra["ball"].pos[0] + extra["dx"], extra["ball"].pos[1] + extra["dy"])
            # ‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏ö‡∏à‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏ö‡∏≠‡∏•‡πÄ‡∏™‡∏£‡∏¥‡∏° 
            if extra["ball"].pos[0] <= 0 or extra["ball"].pos[0] + extra["ball"].size[0] >= Window.width:
                extra["dx"] *= -1
            if extra["ball"].pos[1] + extra["ball"].size[1] >= Window.height:
                extra["dy"] *= -1
            # ‡πÄ‡∏î‡πâ‡∏á‡∏Å‡∏±‡∏ö Paddle ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏ö‡∏≠‡∏•‡πÄ‡∏™‡∏£‡∏¥‡∏° (
            if (extra["ball"].pos[1] <= self.paddle.pos[1] + self.paddle.size[1] and 
                self.paddle.pos[0] <= extra["ball"].pos[0] <= self.paddle.pos[0] + self.paddle.size[0]):
                extra["dy"] = abs(extra["dy"])  # ‡πÄ‡∏î‡πâ‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô 
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏Å‡∏´‡∏•‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏ö‡∏≠‡∏•‡πÄ‡∏™‡∏£‡∏¥‡∏°‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ 
            if extra["ball"].pos[1] <= 0:
                if extra["ball"] in self.canvas.children:  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô canvas ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö 
                    self.canvas.remove(extra["ball"])
                self.extra_balls.remove(extra)

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏ô‡∏Å‡∏±‡∏ö‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏ö‡∏≠‡∏•‡∏´‡∏•‡∏±‡∏Å
        for block in self.blocks[:]:
            block_rect = block["rectangle"]
            if (block_rect.pos[0] <= self.ball.pos[0] <= block_rect.pos[0] + block_rect.size[0] and 
                block_rect.pos[1] <= self.ball.pos[1] <= block_rect.pos[1] + block_rect.size[1]):
                block["hit_points"] -= 1  # ‡∏•‡∏î‡∏û‡∏•‡∏±‡∏á‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï
                if block["hit_points"] <= 0:
                    if self.break_sound:
                        self.break_sound.play()  # ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏ñ‡∏π‡∏Å‡∏ó‡∏≥‡∏•‡∏≤‡∏¢
                    self.blocks.remove(block)
                    self.canvas.remove(block_rect)
                    self.score += 10
                    # üî• ‡∏™‡∏∏‡πà‡∏°‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏î‡∏£‡∏≠‡∏õ‡πÑ‡∏≠‡πÄ‡∏ó‡∏° 30%
                    if randint(1, 100) <= 30:
                        powerup = PowerUp(block_rect.pos[0], block_rect.pos[1], 
                                        choice(["expand_paddle", "extra_ball", "speed_up", "slow_down"]))  # ‡πÄ‡∏û‡∏¥‡πà‡∏° "slow_down" 
                        self.add_widget(powerup.image)
                        self.powerups.append(powerup)
                else:
                    if self.hit_sound:
                        self.hit_sound.play()
                    self.update_block_color(block)  # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏µ‡∏ï‡∏≤‡∏° hit_points
                self.dy *= -1
                self.game_screen.update_labels()
                break  # ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ä‡∏ô‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏ô‡∏ã‡πâ‡∏≥

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏ô‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏ö‡∏≠‡∏•‡πÄ‡∏™‡∏£‡∏¥‡∏° 
        for extra in self.extra_balls[:]:
            for block in self.blocks[:]:
                block_rect = block["rectangle"]
                if (block_rect.pos[0] <= extra["ball"].pos[0] <= block_rect.pos[0] + block_rect.size[0] and 
                    block_rect.pos[1] <= extra["ball"].pos[1] <= block_rect.pos[1] + block_rect.size[1]):
                    block["hit_points"] -= 1
                    if block["hit_points"] <= 0:
                        if self.break_sound:
                            self.break_sound.play()  # ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏ñ‡∏π‡∏Å‡∏ó‡∏≥‡∏•‡∏≤‡∏¢ 
                        self.blocks.remove(block)
                        self.canvas.remove(block_rect)
                        self.score += 10
                        if randint(1, 100) <= 30:
                            powerup = PowerUp(block_rect.pos[0], block_rect.pos[1], 
                                            choice(["expand_paddle", "extra_ball", "speed_up", "slow_down"]))  # ‡πÄ‡∏û‡∏¥‡πà‡∏° "slow_down" 
                            self.add_widget(powerup.image)
                            self.powerups.append(powerup)
                    else:
                        if self.hit_sound:
                            self.hit_sound.play()
                        self.update_block_color(block)
                    extra["dy"] *= -1
                    self.game_screen.update_labels()
                    break  # ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ä‡∏ô‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏´‡∏ô‡∏∂‡πà‡∏á 

        # ‡∏ñ‡πâ‡∏≤‡∏ó‡∏≥‡∏•‡∏≤‡∏¢‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏î‡πà‡∏≤‡∏ô
        if not self.blocks:
            self.next_level()

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏Å‡∏´‡∏•‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏ö‡∏≠‡∏•‡∏´‡∏•‡∏±‡∏Å ‡πÅ‡∏•‡∏∞‡∏•‡∏î lives ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏ö‡∏≠‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ 
        if self.ball.pos[1] <= 0 and not self.extra_balls:  # ‡∏ñ‡πâ‡∏≤‡∏•‡∏π‡∏Å‡∏ö‡∏≠‡∏•‡∏´‡∏•‡∏±‡∏Å‡∏ï‡∏Å‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏•‡∏π‡∏Å‡∏ö‡∏≠‡∏•‡πÄ‡∏™‡∏£‡∏¥‡∏° 
            self.lives -= 1
            self.game_screen.update_labels()
            if self.lives > 0:
                self.ball.pos = (Window.width / 2, Window.height / 2)
                self.dy = abs(self.dy)  # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô 
            else:
                self.running = False
                Clock.unschedule(self.update)
                self.end_game()

    def end_game(self):
        self.running = False
        Clock.unschedule(self.update)
        self.show_game_over_message()

    def show_game_over_message(self):
        game_over_label = Label(
            text="Game Over. back to menu!",
            font_size=50,
            size_hint=(None, None),
            size=(300, 100),
            color=(1, 0, 0, 1),
            pos=(Window.width / 2 - 150, Window.height / 2),
        )
        self.add_widget(game_over_label)
        # ‡∏£‡∏≠ 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏°‡∏ô‡∏π
        Clock.schedule_once(lambda dt: self.game_screen.manager.current == "menu", 3)
        
    def next_level(self):
        self.level += 1  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö
        if self.level > 3:  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà 3 ‡∏î‡πà‡∏≤‡∏ô
            self.running = False
            Clock.unschedule(self.update)
            self.show_game_over_message()
            return
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏ö‡∏≠‡∏•‡∏ó‡∏µ‡∏•‡∏∞‡∏ô‡πâ‡∏≠‡∏¢ ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
        self.dx *= 0.5
        self.dy *= 0.5
        self.setup_game()  # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà
        self.start_game()  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà

    def on_touch_move(self, touch):
        new_x = touch.x - self.paddle.size[0] / 2
        new_x = max(0, min(Window.width - self.paddle.size[0], new_x))
        self.paddle.pos = (new_x, self.paddle.pos[1])

    def on_key_down(self, window, key, scancode, codepoint, modifier):
        if codepoint == "a" or key == 276:  # Left arrow key
            self.moving_left = True
        elif codepoint == "d" or key == 275:  # Right arrow key
            self.moving_right = True
        elif codepoint == "p":  # ‡∏Å‡∏î 'P' ‡πÄ‡∏û‡∏∑‡πà‡∏≠ Pause/Resume
            self.toggle_pause()
        Clock.unschedule(self.move_paddle)
        Clock.schedule_interval(self.move_paddle, 1 / 60)

    def on_key_up(self, window, key, scancode):
        if key in (ord("a"), ord("d"), 276, 275):  # Left and right arrow keys
            self.moving_left = False
            self.moving_right = False
        # ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô paddle ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏î‡∏≠‡∏¢‡∏π‡πà
        if not self.moving_left and not self.moving_right:
            Clock.unschedule(self.move_paddle)

    def move_paddle(self, dt):
        if self.moving_left:
            new_x = max(self.paddle.pos[0] - self.paddle_speed, 0)
            self.paddle.pos = (new_x, self.paddle.pos[1])
        if self.moving_right:
            new_x = min(self.paddle.pos[0] + self.paddle_speed, Window.width - self.paddle.size[0])
            self.paddle.pos = (new_x, self.paddle.pos[1])

    def apply_powerup(self, effect):
        if effect == "expand_paddle":
            self.paddle.size = (self.paddle.size[0] * 1.5, self.paddle.size[1])  # ‡∏Ç‡∏¢‡∏≤‡∏¢ Paddle
            self.paddle_color = Color(0, 1, 0, 1)  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
            self.canvas.add(self.paddle_color)
            self.canvas.add(self.paddle)
        elif effect == "extra_ball":
            self.create_extra_ball()
        elif effect == "speed_up":
            self.dx *= 1.2  # ‡πÅ‡∏Å‡πâ‡∏à‡∏≤‡∏Å 0.2 ‡πÄ‡∏õ‡πá‡∏ô 1.2 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô‡∏à‡∏£‡∏¥‡∏á 
            self.dy *= 1.2
            for extra in self.extra_balls:  # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏•‡∏π‡∏Å‡∏ö‡∏≠‡∏•‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏î‡πâ‡∏ß‡∏¢ 
                extra["dx"] *= 1.2
                extra["dy"] *= 1.2
        elif effect == "slow_down":  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÉ‡∏´‡∏°‡πà
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏î‡∏¥‡∏° 
            if not hasattr(self, "original_dx"):
                self.original_dx = self.dx
                self.original_dy = self.dy
                self.original_extra_speeds = [(extra["dx"], extra["dy"]) for extra in self.extra_balls]
            # ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏•‡∏π‡∏Å‡∏ö‡∏≠‡∏•‡∏´‡∏•‡∏±‡∏Å 
            self.dx *= 0.5
            self.dy *= 0.5
            # ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏•‡∏π‡∏Å‡∏ö‡∏≠‡∏•‡πÄ‡∏™‡∏£‡∏¥‡∏° 
            for extra in self.extra_balls:
                extra["dx"] *= 0.5
                extra["dy"] *= 0.5
            # ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏õ‡∏Å‡∏ï‡∏¥‡∏´‡∏•‡∏±‡∏á 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ 
            Clock.schedule_once(self.reset_speed, 5)

    def reset_speed(self, dt):
        # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏°‡∏∑‡πà‡∏≠ Power-up "slow_down" ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤ 
        if hasattr(self, "original_dx"):
            # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏•‡∏π‡∏Å‡∏ö‡∏≠‡∏•‡∏´‡∏•‡∏±‡∏Å (
            self.dx = self.original_dx
            self.dy = self.original_dy
            # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏•‡∏π‡∏Å‡∏ö‡∏≠‡∏•‡πÄ‡∏™‡∏£‡∏¥‡∏° 
            for i, extra in enumerate(self.extra_balls):
                if i < len(self.original_extra_speeds):
                    extra["dx"], extra["dy"] = self.original_extra_speeds[i]
            # ‡∏•‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏î‡∏¥‡∏° 
            del self.original_dx
            del self.original_dy
            del self.original_extra_speeds

    def create_extra_ball(self):
        new_ball = Ellipse(size=(20, 20), pos=self.ball.pos)
        self.canvas.add(Color(1, 1, 1))
        self.canvas.add(new_ball)
        # ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏õ‡∏Å‡∏ï‡∏¥‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ "slow_down" ‡πÅ‡∏•‡∏∞‡∏™‡∏∏‡πà‡∏°‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ 
        dx = (self.original_dx if hasattr(self, "original_dx") else self.dx) * choice([-1, 1]) * uniform(0.8, 1.2)
        dy = abs(self.original_dy if hasattr(self, "original_dy") else self.dy)
        self.extra_balls.append({"ball": new_ball, "dx": dx, "dy": dy})